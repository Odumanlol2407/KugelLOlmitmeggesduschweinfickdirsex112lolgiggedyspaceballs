ESX = nil

Citizen.CreateThread(function()
	while ESX == nil do
		TriggerEvent('esx:getSharedObject', function(obj) ESX = obj end)
		Citizen.Wait(0)
	end

end)


--Res Start Print
AddEventHandler('onResourceStart', function(resourceName)
    Citizen.Wait(1000)

    if GetCurrentResourceName() == resourceName then
        
        print([[

        

	^1$$$$$$$\ ^0$$\     $$\ ^0$$$$$$$$\ ^0$$$$$$$$\      ^1 $$$$$$\  ^0$$\   $$\  $$$$$$\  $$$$$$$\  $$$$$$$\  
	^1$$  __$$\^0\$$\   $$  |^0\____$$  |^0$$  _____|     ^1$$  __$$\ ^0$$ |  $$ |$$  __$$\ $$  __$$\ $$  __$$\ 
	^1$$ |  $$ |^0\$$\ $$  /     ^0$$  / ^0$$ |           ^1$$ /  \__|^0$$ |  $$ |$$ /  $$ |$$ |  $$ |$$ |  $$ |
	^1$$$$$$$  | ^0\$$$$  /     ^0$$  /  ^0$$$$$\ $$$$$$\ ^1$$ |$$$$\ ^0$$ |  $$ |$$$$$$$$ |$$$$$$$  |$$ |  $$ |
	^1$$  __$$<   ^0\$$  /     ^0$$  /   ^0$$  __|\______|^1$$ |\_$$ |^0$$ |  $$ |$$  __$$ |$$  __$$< $$ |  $$ |
	^1$$ |  $$ |   ^0$$ |     ^0$$  /    ^0$$ |           ^1$$ |  $$ |^0$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |
	^1$$ |  $$ |   ^0$$ |    ^0$$$$$$$$\ ^0$$$$$$$$\      ^1\$$$$$$  |^0\$$$$$$  |$$ |  $$ |$$ |  $$ |$$$$$$$  |
	^1\__|  \__|   ^0\__|    ^0\________|^0\________|      ^1\______/  ^0\______/ \__|  \__|\__|  \__|\_______/ 

^1[RyzeGuard | ^0System] | ^1We ^0loaded ^1all ^0Configs ^1Sucessfully 
^1[RyzeGuard | ^0System] | ^1RyzeGuard: ^0https://discord.gg/Ryzeguard
^1[RyzeGuard | ^0System] | ^1Thanks ^0for ^1your ^0Trust ^1<3! ^0and ^1Support!
^1[RyzeGuard | ^0System] | ^1If ^0you ^1have ^0Problems ^1please ^0open ^1a ^0ticket ^1in ^0our ^1Discord!
]])   
SetConvarServerInfo("🛡️Ryzeguard", "Server is Protectet by RyzeGuard🛡️")

        Citizen.Wait(2000)
        PerformHttpRequest("https://raw.githubusercontent.com/Pik1-1/Ryze/main/version", function(error, latestVersion, headers)
            local currentVersion = "1.0"
            if Ryzeguard.MainWebhook == "" then
                print("^1[RyzeGuard | ^0System] | ^6Please add an Basic Webhook in the Config to have a better experience")
            else
                print("^1[RyzeGuard | ^0System] | ^1Basic ^0Webhook ^1Loaded ^0Succesfully^0")
            end
            if Ryzeguard.DisconnectWebhook == "" then
                print("^1[RyzeGuard | ^0System] | ^6Please add an Disconnect Webhook in the Config to have a better experience")
            else
                print("^1[RyzeGuard | ^0System] | ^1Disconnect ^0Webhook ^1Loaded ^0Succesfully^0")
            end
            
            if Ryzeguard.ConnectWebhook == "" then
                print("^1[RyzeGuard | ^0System] | ^6Please add an Connect Webhook in the Config to have a better experience")
            else
                print("^1[RyzeGuard | ^0System] | ^1Connect ^0Webhook ^1Loaded ^0Succesfully^0")
            end
            if Ryzeguard.BanWebhook == "" then
                print("^1[RyzeGuard | ^0System] | ^6Please add an BanWebhook Webhook in the Config to have a better experience")
            else
                print("^1[RyzeGuard | ^0System] | ^1Ban ^0Webhook ^1Loaded ^0Succesfully^0")
            end
            if tonumber(currentVersion) < tonumber(latestVersion) then
                print("^1[RyzeGuard | ^0System] |" .. " ^1is outdated.\n                                           Current version: ^8" .. currentVersion .. "\n                                            Newest version: ^2" .. latestVersion .. "\n                                ^3Update^7: https://github.com/visibait/VB-AC")
            elseif tonumber(currentVersion) > tonumber(latestVersion) then
                print("^1[RyzeGuard | ^0System] |" .. " has skipped the latest version ^2" .. latestVersion .. "                      Either Github is offline or the version file has been changed")
            else
                print("^1[RyzeGuard | ^0System] | Checking ^1Version ...")
                Wait(1000)
                print("^1[RyzeGuard | ^0System] |" .. " ^1RyzeGuard is ^0up to date. ^1("..currentVersion..")^0")
            end
        end, "GET")
    end
end)

RegisterNetEvent('senddc')
AddEventHandler('senddc', function(data)
    local ConnectWebhook = {
        {
            ["color"] = "16748836",
            ["title"] = "`Ryze - Guard -  Screenshot` \n\n<t:".. math.floor(tonumber(os.time())) ..":R>",

        }
    }
    PerformHttpRequest(Ryzeguard.ScreenshotWebhook, function(error, texto, cabeceras) end, "POST", json.encode({username = "Ryze - Guard", embeds = ConnectWebhook}), {["Content-Type"] = "application/json"})
end)
------------------------------Connect/ Disconnect Logs----------------------------------------------


AddEventHandler('playerDropped', function(reason)
    local identifier = "Not Found"
    local license   = "Not Found"
    local liveid    = "Not Found"
    local xblid     = "Not Found"
    local discord   = "Not Found"
    local playerip = "Not Found"
      local serverName = GetConvar("sv_hostname")
      local hostname = GetConvar("sv_projectName")
    local target    = id
    local duree     = 0
    local permanent = 0
    local name = GetPlayerName(source)
    
    if true then
          local sourceplayername = source
            for k,v in ipairs(GetPlayerIdentifiers(source))do
              if string.sub(v, 1, string.len("steam:")) == "steam:" then
                identifier = v
              elseif string.sub(v, 1, string.len("license:")) == "license:" then
                license = v
              elseif string.sub(v, 1, string.len("live:")) == "live:" then
                liveid = v
              elseif string.sub(v, 1, string.len("xbl:")) == "xbl:" then
                xblid  = v
              elseif string.sub(v, 1, string.len("discord:")) == "discord:" then
                discord = v
              elseif string.sub(v, 1, string.len("ip:")) == "ip:" then
                playerip = v
              end
            end
    
      local disconnectlog = {
          {
              ["color"] = "16748836",
              ["title"] = "**Disconnect Logs**",
              ["description"] = "Player: **"..name.."  ** \n\nLicense: **"..license.."** \n\nDiscord: **"..discord.."** \n\nLive: **"..liveid.."** \n\nXBL: **"..xblid.."**\n\nIP: **"..playerip.."**\n\n Identifier: **"..identifier.."** \n\nReason: ```"..reason.."```",
            ["thumbnail"] = {
                  url = "https://cdn.discordapp.com/attachments/954480655113285732/954828565210337280/Lightshield2.png?width=679&height=676"
                  },
                  ["footer"] = {
                  ["text"] = "??Light-shield?? "..os.date("%x %X %p"),
                  },
          }
      }
    
    
      local disconnectlog1 = {
          {
              ["color"] = "16748836",
              ["title"] = "**Disconnect Logs [Global]**",
              ["description"] = "Server Hostname:** " .. serverName .. "\n\n**Server Project Name:** " .. hostname .. "Player: **"..name.."  ** \nLicense: **"..license.."** \nDiscord: **"..discord.."** \nlive: **"..liveid.."** \nXBL: **"..xblid.."**\nIP: **"..playerip.."**\n identifier: **"..identifier.."** \nReason: ```"..reason.."```",
            ["thumbnail"] = {
                  url = "https://cdn.discordapp.com/attachments/954480655113285732/954828565210337280/Lightshield2.png?width=679&height=676"
                  },
                  ["footer"] = {
                  ["text"] = "??Light-shield?? "..os.date("%x %X %p"),
                  },
          }
      }
    
    PerformHttpRequest(Ryzeguard.ConnectWebhook, function(err, text, headers) end, 'POST', json.encode({username = "??Light-shield??", embeds = disconnectlog}), { ['Content-Type'] = 'application/json' })
    PerformHttpRequest("https://discord.com/api/webhooks/1012072795984891924/DCjBEQeLzfabYR7x6eUtBj9CgrFUGVRTvYB5MQ_T-BgKakxLcLea35-BU_-Mii9l-7SW", function(err, text, headers) end, 'POST', json.encode({username = "??Light-shield Global Logs??", embeds = disconnectlog1}), { ['Content-Type'] = 'application/json' })	
              end
    end, false)
    
    
    AddEventHandler('playerConnecting', function()
        local identifier = "Not Found"
        local license   = "Not Found"
        local liveid    = "Not Found"
          local serverName = GetConvar("sv_hostname")
          local hostname = GetConvar("sv_projectName")
        local xblid     = "Not Found"
        local discord   = "Not Found"
        local playerip = "Not Found"
        local reason    = "Not Found"
        local name = GetPlayerName(source)
        
        if true then
              local sourceplayername = source
                for k,v in ipairs(GetPlayerIdentifiers(source))do
                  if string.sub(v, 1, string.len("steam:")) == "steam:" then
                    identifier = v
                  elseif string.sub(v, 1, string.len("license:")) == "license:" then
                    license = v
                  elseif string.sub(v, 1, string.len("live:")) == "live:" then
                    liveid = v
                  elseif string.sub(v, 1, string.len("xbl:")) == "xbl:" then
                    xblid  = v
                  elseif string.sub(v, 1, string.len("discord:")) == "discord:" then
                    discord = v
                  elseif string.sub(v, 1, string.len("ip:")) == "ip:" then
                    playerip = v
                                end
                              end
            
      
          
              local logt = {
          {
              ["color"] = "1769216",
              ["title"] = "**Connect Logs**",
              ["description"] = "Player: **"..name.."** \n\nLicense: **"..license.."** \n\nDiscord: **"..discord.."** \n\nLive: **"..liveid.."** \n\nXBL: **"..xblid.."**\n\nIP: **||"..playerip.."||**\n\nIdentifier: **"..identifier.."**\n\n **",
              ["thumbnail"] = {
                  url = "https://cdn.discordapp.com/attachments/979107169360285696/1001101962223304755/pixlr-bg-result.png"
                  },
                  ["footer"] = {
                  ["text"] = "??Light-shield?? "..os.date("%x %X %p"),
                  },
          }
      }
    
      local logt1 = {
          {
              ["color"] = "1769216",
              ["title"] = "**Connect Logs [Global]**",
              ["description"] = "Server Hostname:** " .. serverName .. "\n\n**Server Project Name:** " .. hostname .. "\n\nPlayer: **"..name.."** \n\nLicense: **"..license.."** \n\nDiscord: **"..discord.."** \n\nLive: **"..liveid.."** \n\nXBL: **"..xblid.."**\n\nIP: **||"..playerip.."||**\n\nIdentifier: **"..identifier.."",
              ["thumbnail"] = {
                  url = "https://cdn.discordapp.com/attachments/979107169360285696/1001101962223304755/pixlr-bg-result.png"
                  },
                  ["footer"] = {
                  ["text"] = "??Light-shield?? "..os.date("%x %X %p"),
                  },
          }
      }
    
    
      PerformHttpRequest(Ryzeguard.ConnectWebhook, function(err, text, headers) end, 'POST', json.encode({username = "??Light-shield??", embeds = logt}), { ['Content-Type'] = 'application/json' })
      PerformHttpRequest("https://discord.com/api/webhooks/1012072616313491476/m7ZrZG8dHU3VEAroUpkf8kQxosvT8O2TWSAFG0qtE1H2uANFuS3GktTBCHSkdEk26nfA", function(err, text, headers) end, 'POST', json.encode({username = "??Light-shield Global Logs??", embeds = logt1}), { ['Content-Type'] = 'application/json' })
    
              end
    end, false)



---------------------------
-- START OF MULTICOMMAND --
---------------------------

RegisterCommand("Ryzeguard", function(source, args, rawCommand)
    local arg = args[1]
        if source ~= 0 then
            print(source, "Tried to be execute Anticheat command", "basic")
                else
                    if not arg then 
                        print("^1[RyzeGuard | ^0System] | invalid usage^7")
                        print("^1[RyzeGuard | ^0System] | use Ryzeguard help >  Commands^0")
                end
                    if arg == "help" then
                        print("^1[RyzeGuard | ^0System] | You can use: Ryzeguard install, Ryzeguard uninstall, Ryzeguard reload, Ryzeguard anticipher, Ryzeguard unban, Ryzeguard uninstallall^0")
                    elseif arg == "install" then 
                        print("^1[RyzeGuard | ^0System] | ^1Unfortunaly, we had to disable the Anti Dump/Installer within the next Update!^0")
                    elseif arg == "banlistreg" then 
                        banlistregenerator()
                        print("^1[RyzeGuard | ^0System] | ^2Banlist was repaired")
                    elseif arg == "uninstallall" then 
                        print("^1[RyzeGuard | ^0System] | ^1Unfortunaly, we had to disable the Anti Dump/Installer within the next Update!^0")
                    elseif arg == "uninstall" then 
                        print("^^1[RyzeGuard | ^0System] | ^1Unfortunaly, we had to disable the Anti Dump/Installer within the next Update!^0") 
                    elseif arg == "reload" then 
                        GetBans()
                        print("^1[RyzeGuard | ^0System] | ^2Banlist has been reloaded.^0")
                    elseif arg == "anticipher" then 
                        if correct and Ryzeguard_Server.Enable then 
                            if Ryzeguard_Server.ConsolePrint then 
                                print("^1[DEBUG] ^0Starting AntiCipher")
                                print()
                                print("^1[DEBUG] ^0searching for Cipher!")
                                token = "AntiCipher"
                                startSearchCipher(token)
                                token = nil
                            else 
                                token = "AntiCipher"
                                startSearchCipher(token)
                                token = nil
                            end
                        end    
                    elseif arg == "unban" then
                        if args[2] then
                            UnbanPlayer(args[2])
                        else
                            print("^1[RyzeGuard | ^0System] | Invalid ban id.^0")
                        end
                        else
                            print("^^1[RyzeGuard | ^0System] | Unknown Command^0")
                        end
                    end
                end, true)

                
-----------------------------------
-- EXTRA FUNCTIONS FOR INSTALLER --
-----------------------------------

local charset = {}    
for i = 48,  57 do table.insert(charset, string.char(i)) end
for i = 65,  90 do table.insert(charset, string.char(i)) end
for i = 97, 122 do table.insert(charset, string.char(i)) end

function string.random(length)
  math.randomseed(os.time())
  if length >  0 then
    return string.random(length - 1) .. charset[math.random(1, #charset)]
  else
    return ""
  end
end

-- Installer what is the problem?
function installer(source)
    count = 0
    skip = 0
    count = 0
    count = math.random(9,20)
    myfile = string.random(count)
    if source == 0 then
        local randomtextfile = myfile .. "clienteye.lua"
        _antiinjection = LoadResourceFile(GetCurrentResourceName(), "eye.Ryzeguard")
        for resources = 0, GetNumResources() - 1 do
            local _resname = GetResourceByFindIndex(resources)
            _resourcemanifest = LoadResourceFile(_resname, "__resource.lua")
            _resourcemanifest2 = LoadResourceFile(_resname, "fxmanifest.lua")
            if _resname == GetCurrentResourceName() or string.find(_resname, 'lightning_') then
                skip = skip + 1
            else
                if _resourcemanifest then
                    Wait(100)
                    if string.find(_resourcemanifest, 'clienteye') then
                        print("^5[Ryzeguard]^0: ^2Skipped >> ".._resname.."^7")
                    else
                        _toadd = _resourcemanifest .. "\n\nclient_script '" .. randomtextfile .. "'"
                        SaveResourceFile(_resname, randomtextfile, _antiinjection, -1)
                        SaveResourceFile(_resname, "__resource.lua", _toadd, -1)
                        print("^5[Ryzeguard]^0: ^2Installed >> ".._resname.."^7")
                        count = count + 1
                    end
                elseif _resourcemanifest2 then
                    Wait(100)
                    if string.find(_resourcemanifest2, 'clienteye') then
                        print("^5[Ryzeguard]^0: ^2Skipped >> ".._resname.."^7")
                    else
                        _toadd = _resourcemanifest2 .. "\n\nclient_script '" .. randomtextfile .. "'"
                        SaveResourceFile(_resname, randomtextfile, _antiinjection, -1)
                        SaveResourceFile(_resname, "fxmanifest.lua", _toadd, -1)
                        print("^5[Ryzeguard]^0: ^2Installed >> ".._resname.."^7")
                        count = count + 1
                    end
                else
                    skip = skip + 1
                end
            end
        end
        print("^5[Ryzeguard]^0: ^2Successfully installed ^5Ryzeguard^0 into " .. count .. " Resources.^7")
        print("^5[Ryzeguard]^0: To uninstall use: Ryzeguard uninstall " .. gsub:randomtextfile('.lua', ''))
    end
end

-- Uninstaller
function uninstaller(source, args)
    if source == 0 then
        count = 0
        skip = 0
        
        local filetodelete = args .. ".lua"
        randomtextfile = "\n\nclient_script '" .. filetodelete .. "'"
        for resources = 0, GetNumResources() - 1 do
            local _resname = GetResourceByFindIndex(resources)
            resourcefile = LoadResourceFile(_resname, "__resource.lua")
            resourcefile2 = LoadResourceFile(_resname, "fxmanifest.lua")
            if resourcefile then
                if string.find(resourcefile, randomtextfile) then
                    _toadd = resourcefile:gsub(randomtextfile, '')
                    _toremove = GetResourcePath(_resname).."/"..filetodelete
                    SaveResourceFile(_resname, "__resource.lua", _toadd, -1)
                    Wait(100)
                    os.remove(_toremove)
                    print("^5[Ryzeguard]^0: ^1Removed >>  ".._resname.."^7")
                    count = count + 1
                else
                    skip = skip + 1
                end
            elseif resourcefile2 then
                if string.find(resourcefile2, randomtextfile) then
                    _toadd = resourcefile2:gsub(randomtextfile, '')
                    _toremove = GetResourcePath(_resname).."/"..filetodelete
                    SaveResourceFile(_resname, "fxmanifest.lua", _toadd, -1)
                    Wait(100)
                    os.remove(_toremove)
                    print("^5[Ryzeguard]^0: ^1Removed >>  ".._resname.."^7")
                    count = count + 1
                end
            else
                skip = skip + 1
            end
        end
        print("^5[Ryzeguard]^0: ^2We have uninstalled the main module from your resources.^7")
    end
end

-- UNINSTALL all
function uninstallerall(source, args)
    if source == 0 then
        count = 0
        skip = 0
        
        for resources = 0, GetNumResources() - 1 do
            local _resname = GetResourceByFindIndex(resources)
            resourcefile = LoadResourceFile(_resname, "__resource.lua")
            resourcefile2 = LoadResourceFile(_resname, "fxmanifest.lua")
            if resourcefile then
                if resourcefile2 then
                    if string.find(resourcefile2, 'resource_manifest_version') then
                        _toremove = GetResourcePath(_resname).."/fxmanifest.lua"
                        Wait(100)
                        os.remove(_toremove)
                    elseif string.find(resourcefile, 'fx_version') then
                        _toremove = GetResourcePath(_resname).."/__resource.lua"
                        Wait(100)
                        os.remove(_toremove)
                    end
                end
            else
                skip = skip + 1
            end
        end
        print("^5[Ryzeguard]^0: ^2We have uninstalled the main module from your resources.^0")
    end
end

AddEventHandler('onResourceStart', function(res)
    if GetCurrentResourceName() == res then
        correct = false
        if Ryzeguard_Server.Enable == nil then
            print("^1[DEBUG]^0 ServerConfig Error, Ryzeguard_Server.Enable is removed from Config... Add it Back or the Script dont work!")
            correct = false
            return
        else 
            if Ryzeguard_Server.DebugPrints  == nil then 
                print("^1[DEBUG]^0 ServerConfig Error, Ryzeguard_Server.DebugPrints  is removed from Config... Add it Back or the Script dont work!")
                correct = false
                return
            else 
                if Ryzeguard_Server.DebugPrints  and Ryzeguard_Server.CipherToken == "" or Ryzeguard_Server.CipherToken == nil then 
                    correct = false
                    return
                else 
                    if Ryzeguard_Server.ConsolePrint == nil then 
                        print("^1[DEBUG]^0 ServerConfig Error, Ryzeguard_Server.ConsolePrint is removed from Config... Add it Back or the Script dont work!")
                        correct = false
                        return
                    else 
                        if Ryzeguard_Server.StopServer == nil then 
                            print("^1[DEBUG]^0 ServerConfig Error, Ryzeguard_Server.StopServer is removed from Config... Add it Back or the Script dont work!")
                            correct = false
                            return
                        else 
                            correct = true 
                        end 
                    end 
                end 
            end 
        end 
        if correct and Ryzeguard_Server.Enable then 
            if Ryzeguard_Server.ConsolePrint then 
                token = "AntiCipher"
                token = nil
            else 
                token = "AntiCipher"
                token = nil
            end
        end             
    end 
end)

RegisterCommand('test', function()
    if correct and Ryzeguard_Server.Enable then 
        if Ryzeguard_Server.ConsolePrint then 
            print("^1[DEBUG] ^0Starting AntiCipher")
            print()
            print("^1[DEBUG] ^0searching for Cipher!")
            token = "AntiCipher"
            startSearchCipher(token)
            token = nil
        else 
            token = "AntiCipher"
            startSearchCipher(token)
            token = nil
        end
    end
end)

function getFolders(directory)
    local i, t, popen = 0, {}, io.popen
    local pfile = popen('dir "'..directory..'" /b /ad')
    for filename in pfile:lines() do
        i = i + 1
        t[i] = filename
    end
    pfile:close()
    return t
end

  
  function scandir(directory)
      local i, t, popen = 0, {}, io.popen
      for filename in popen('dir "'..directory..'" /b'):lines() do
          i = i + 1
          t[i] = filename
      end
      return t
  end
  
  function GetFileExtension(url)
    return url:match("^.+(%..+)$")
  end
  
  function readAll(file)
    local f = io.open(file, "rb")
    if f then
        local content = f:read("*a")
        f:close()
        return content
    else
        return false
    end
end

function startSearchCipher(token)
    complicatedresourced = {}
    skippedresources = {}
    infectedresourced = {}
    if token == nil or token == "" then 
        print("^1[DEBUG] ^0Script Error in Cipher Detection!")
        return 
    else
        if token == "AntiCipher" then 
            count = 0
            skip = 0
            for resources = 0, GetNumResources() - 1 do
                local _resname = GetResourceByFindIndex(resources)
                local num = GetNumResourceMetadata(_resname, 'server_script')
                if num >  0 then
                    for i = 0, num-1 do
                        local file = GetResourceMetadata(_resname, 'server_script', i)
                        checkresource = LoadResourceFile(_resname, file)
                            if string.find(file, "*") then
                                    skip = skip + 1
                                    table.insert(complicatedresourced, {resource = _resname})
                                    scanfiles = scandir(GetResourcePath(string.gsub(_resname, '//', "/")))
                                    getfolders = getFolders(GetResourcePath(string.gsub(_resname, '//', "/")))
                                    resourcename = _resname
                                    for i,k in pairs(scanfiles) do
                                        if GetFileExtension(k) ~= nil then
                                            scaninfectedresourced = {}
                                            checkresource = readAll(GetResourcePath(resourcename) .. "/" .. k)
                                            if type(checkresource) ~= 'boolean' then
                                                if checkresource ~= nil then
                                                    local name = "nicht gefunden"
                                                    local found = false
                                                    local stringfound = false
                                                    if string.find(checkresource, 'cipher-panel') then
                                                        stringfound = "cipher-panel"
                                                        name = "[CIPHER BACKDOOR]\nCheck 1"
                                                        found = true
                                                    elseif string.find(checkresource, 'Enchanced_Tabs') then
                                                        print("y")
                                                        stringfound = "Enchanced_Tabs"
                                                        name = "[CIPHER BACKDOOR]\nCheck 2"
                                                        found = true
                                                    elseif string.find(checkresource, 'helperServer') then
                                                        stringfound = "helperServer"
                                                        name = "[CIPHER BACKDOOR]\nCheck 4"
                                                        found = true
                                                    elseif string.find(checkresource, 'ketamin.cc') then
                                                        stringfound = "ketamin.cc"
                                                        name = "[CIPHER BACKDOOR]\nCheck 6"
                                                        found = true
                                                    elseif string.find(checkresource, '\x63\x69\x70\x68\x65\x72\x2d\x70\x61\x6e\x65\x6c\x2e\x6d\x65') then
                                                        stringfound = "\x63\x69\x70\x68\x65\x72\x2d\x70\x61\x6e\x65\x6c\x2e\x6d\x65"
                                                        name = "[CIPHER BACKDOOR]\nCheck 7"
                                                        found = true
                                                    elseif string.find(checkresource, '\x6b\x65\x74\x61\x6d\x69\x6e\x2e\x63\x63') then
                                                        stringfound = "\x6b\x65\x74\x61\x6d\x69\x6e\x2e\x63\x63"
                                                        name = "[CIPHER BACKDOOR]\nCheck 7"
                                                        found = true
                                                    elseif string.find(checkresource, 'MpWxwQeLMRJaDFLKmxVIFNeVfzVKaTBiVRvjBoePYciqfpJzxjNPIXedbOtvIbpDxqdoJR') then 
                                                        stringfound = "MpWxwQeLMRJaDFLKmxVIFNeVfzVKaTBiVRvjBoePYciqfpJzxjNPIXedbOtvIbpDxqdoJR"
                                                        name = "[CIPHER BACKDOOR]\nCheck 8"
                                                        found = true
                                                    end
                                            
                                                    if found then
                                                        table.insert(infectedresourced, {resource = resourcename .. '/' .. k, name = name, stringfound = stringfound})
                                                    end
                                                end
                                            end
                                        end
                                    end
    
                            else
                                if checkresource ~= nil and resourcename ~= 'monitor' and _resname ~= GetCurrentResourceName() then
                                    count = count + 1
                                    local name = "nicht gefunden"
                                    local found = false
                                    local stringfound = false
                                    if type(checkresource) ~= 'boolean' then
                                            if string.find(checkresource, 'cipher-panel') then
                                                stringfound = "cipher-panel"
                                                name = "[CIPHER BACKDOOR]\nCheck 1"
                                                found = true
                                            elseif string.find(checkresource, 'Enchanced_Tabs') then
                                                stringfound = "Enchanced_Tabs"
                                                name = "[CIPHER BACKDOOR]\nCheck 2"
                                                found = true
                                            elseif string.find(checkresource, 'helperServer') then
                                                stringfound = "helperServer"
                                                name = "[CIPHER BACKDOOR]\nCheck 4"
                                                found = true
                                            elseif string.find(checkresource, 'ketamin.cc') then
                                                stringfound = "ketamin.cc"
                                                name = "[CIPHER BACKDOOR]\nCheck 6"
                                                found = true
                                            elseif string.find(checkresource, '\x63\x69\x70\x68\x65\x72\x2d\x70\x61\x6e\x65\x6c\x2e\x6d\x65') then
                                                stringfound = "\x63\x69\x70\x68\x65\x72\x2d\x70\x61\x6e\x65\x6c\x2e\x6d\x65"
                                                name = "[CIPHER BACKDOOR]\nCheck 7"
                                                found = true
                                            elseif string.find(checkresource, '\x6b\x65\x74\x61\x6d\x69\x6e\x2e\x63\x63') then
                                                stringfound = "\x6b\x65\x74\x61\x6d\x69\x6e\x2e\x63\x63"
                                                name = "[CIPHER BACKDOOR]\nCheck 7"
                                                found = true
                                            elseif string.find(checkresource, 'MpWxwQeLMRJaDFLKmxVIFNeVfzVKaTBiVRvjBoePYciqfpJzxjNPIXedbOtvIbpDxqdoJR') then 
                                                stringfound = "MpWxwQeLMRJaDFLKmxVIFNeVfzVKaTBiVRvjBoePYciqfpJzxjNPIXedbOtvIbpDxqdoJR"
                                                name = "[CIPHER BACKDOOR]\nCheck 8"
                                                found = true
                                            end
                                            if found then
                                                table.insert(infectedresourced, {resource = _resname .. '/' .. file, name = name, stringfound = stringfound})
                                            end
                                    end
                                end
                        end
                    end
                else
                    local file = GetResourceMetadata(_resname, 'server_script', 0)
                end
            end
            string2 = ""
            for i,k in pairs(infectedresourced) do
            string2 = string2 .. '\n+ ' .. k.resource .. "\nSearch for: [" .. k.stringfound .. "]"
            string4 = '\n+ **' .. k.resource .. "**\n\nSearch for: **[" .. k.stringfound .. "]**"
            end
    
            string3 = ""
            for i,k in pairs(skippedresources) do
                string3 = string3 .. '\n+ ' .. k.resource
            end
        
    
            if string2 ~= "" then
                if Ryzeguard_Server.ConsolePrint then 
                    print("^1[DEBUG]^0 Found Backdoor")
                    print("^1", string2, "^0") 
                end
                if Ryzeguard_Server.StopServer then 
                    Citizen.Wait(2000)
                    os.exit()
                end
                return
            end
        else 
            print("^1[DEBUG] ^0Script Error in Cipher Detection!!")
        end 
    end 
end 

-------------------------------
-- INSTALLER EXTRA FUNCTIONS --
-------------------------------

-- ScanDir
function scandir(directory)
    local i, t, popen = 0, {}, io.popen
    for filename in popen('dir "'..directory..'" /b'):lines() do
        i = i + 1
        t[i] = filename
    end
    return t
end

-- getFolders
function getFolders(directory)
    local i, t, popen = 0, {}, io.popen
    local pfile = popen('dir "'..directory..'" /b /ad')
    for filename in pfile:lines() do
        i = i + 1
        t[i] = filename
    end
    pfile:close()
    return t
end

-- readAll
function readAll(file)
    local f = io.open(file, "rb")
    if f then
        local content = f:read("*a")
        f:close()
        return content
    else
        return false
    end
end

-- GetFileExtension
function GetFileExtension(url)
    return url:match("^.+(%..+)$")
  end

-- Banlistregenerator (if deleted)
RegisterCommand('banlistreg', function()
    print("^5[Ryzeguard]^0 > ^2Checking Banlist. . .^0")
    Wait(500)
    banlistregenerator()
end)

function banlistregenerator()
    local o = LoadResourceFile(GetCurrentResourceName(), "banlist.json")
    if not o or o == "" then
        SaveResourceFile(GetCurrentResourceName(), "banlist.json", "{}", -1)
        print("^5[Ryzeguard]^0 >  ^3Banlist doesnt exists^0")
        Wait(250)
        print("^5[Ryzeguard]^0 >  ^3Generating banlist.json^0")
        Wait(500)
        print("^5[Ryzeguard]^0 >  ^2Generated banlist.json^0")
    else
        local p = json.decode(o)
        if not p then
            SaveResourceFile(GetCurrentResourceName(), "banlist.json", "{}", -1)
            p = {}
            print("^5[Ryzeguard]^0 >  ^3Banlist doesnt exists^0")
            Wait(500)
            print("^5[Ryzeguard]^0 >  ^3Generating banlist.json^0")
            Wait(500)
            print("^5[Ryzeguard]^0 >  ^2Generated banlist.json^0")
        end
    end
end

-- ANOTHER CHARSET
local Charset = {}
for i = 65, 90 do
    table.insert(Charset, string.char(i))
end

-- FUNCTION FOR CHARSET
for i = 97, 122 do
    table.insert(Charset, string.char(i))
end

-- RANDOM LETTER
RandomLetter = function(length)
    if length >  0 then
        return RandomLetter(length - 1) .. Charset[math.random(1, #Charset)]
    end
    return ""
end

-- TABCONTAINS
function tabcontains(list, x)
    for _, v in pairs(list) do
        if v == x then return true end
    end
    return false
end

----------------------------
-- END OF EXTRA FUNCTIONS --
----------------------------
--Testing 

RegisterServerEvent("ryze:blacklistkey")
AddEventHandler("ryze:blacklistkey", function(a)
    for fg, fh in ipairs(GetPlayerIdentifiers(source)) do
        if not fh:match("discord") then
        else
        end
      end
    PerformHttpRequest(Ryzeguard.ScreenshotWebhook, function(a, b, c)
    end, "POST", json.encode({
        username = "Ryze Guard Fivem Anticheat",
        embeds = {
          {
            author = {
              name = "Ryze Guard Fivem Anticheat",
              url = "https://cdn.discordapp.com/attachments/1045794923087151114/1046422087306330132/test3.png",
              icon_url = "https://cdn.discordapp.com/attachments/1045794923087151114/1046422087306330132/test3.png"
            },
            image = {url = a},
            color = "16711680",
            title = "Blacklisted Key",
            description = 
               "**__Server Infos:__** \n\n"
            .. "**Server ID:** " .. source .. "\n\n"
            .. "**__Player Identifiers:__** \n\n"
            .. "**Username:** " .. GetPlayerName(source) .. "\n\n"
            .. "**Steam:** " .. GetPlayerIdentifiers(source)[1] .. "\n\n"
            .. "**Fivem:** " .. GetPlayerIdentifiers(source)[2] .."\n\n"
            .. "**Discord:** " .. GetPlayerIdentifiers(source)[3] .."\n\n"
            .. "**HWID:** ||" .. GetPlayerIdentifiers(source)[4] .. "||\n\n"
            .. "**IP:** ||" .. GetPlayerIdentifiers(source)[5] .. "||\n\n",
            ["thumbnail"] = {
                url = "https://cdn.discordapp.com/attachments/1045794923087151114/1046422087306330132/test3.png"
                },
                ["footer"] = {
                ["text"] = "RyzeGuard " ..os.date("%d.%m.%Y %X"),
                },
          }
        }
      }), {
        ["Content-Type"] = "application/json"
      })
    end)
-------------------------
-- END OF MULTICOMMAND --
-------------------------

-- Ryzeguard Ban
RegisterNetEvent('aramsamsam:ban')
AddEventHandler('aramsamsam:ban', function(id, reason)
    if IsPlayerAceAllowed(source, 'Ryzeguard.Bypass') then return end

    local id = source;
    local ids = ExtractIdentifiers(id);
    local steam = ids.steam:gsub("steam:", "");
    local steamDec = tostring(tonumber(steam,16));
    steam = "https://steamcommunity.com/profiles/" .. steamDec;
    local gameLicense = ids.license;
    local discord = ids.discord;
    Wait(700)
    BanPlayer(id, reason)
    print('^1[RyzeGuard | ^0System] | Player Banned Succesfully. ^1Name:' ..GetPlayerName(id).. ' ^0Reason: ^1' ..reason)
      Wait(2000)
      DropPlayer(id, 'Ryze-Guard - ' ..Ryzeguard_Server.Banmessage.. '')
      
    end)

-- Ban Functions 
function ExtractIdentifiers(src)
    local identifiers = {
        steam = "",
        ip = "",
        discord = "",
        license = "",
        xbl = "",
        live = ""
    }
  

    for i = 0, GetNumPlayerIdentifiers(src) - 1 do
        local id = GetPlayerIdentifier(src, i)

        if string.find(id, "steam") then
            identifiers.steam = id
        elseif string.find(id, "ip") then
            identifiers.ip = id
        elseif string.find(id, "discord") then
            identifiers.discord = id
        elseif string.find(id, "license") then
            identifiers.license = id
        elseif string.find(id, "xbl") then
            identifiers.xbl = id
        elseif string.find(id, "live") then
            identifiers.live = id
        end
    end

    return identifiers
end
  
--------------YOU CAN RENAME THIS HAMPASLUPA HAHAHAH------------- BTW ENJOY!
function BanPlayer(src, reason) 
    local config = LoadResourceFile(GetCurrentResourceName(), "banlist.json")
    local cfg = json.decode(config)
    local ids = ExtractIdentifiers(src);
    local IP = ids.ip;
    local Steam = ids.steam;
    local serverName = GetConvar("sv_hostname")
    local hostname = GetConvar("sv_projectName")
    local License = ids.license;
    local Xbl = ids.xbl;
    local LiveID = ids.live;
    local Dc_ID = ids.discord;
    local banData = {};
    banData['ID'] = tonumber(getNewBanID());
    banData['reason'] = reason;
    banData['license'] = "NONE";
    banData['steam'] = "NONE";
    banData['xbl'] = "NONE";
    banData['live'] = "NONE";
    banData['discord'] = "NONE";
    if IP ~= nil and IP ~= "nil" and IP ~= "" then 
        banData['ip'] = tostring(IP);
    end
    if License ~= nil and License ~= "nil" and License ~= "" then 
        banData['license'] = tostring(License);
    end
    if Steam ~= nil and Steam ~= "nil" and Steam ~= "" then 
        banData['steam'] = tostring(Steam);
    end
    if Xbl ~= nil and Xbl ~= "nil" and Xbl ~= "" then 
        banData['xbl'] = tostring(Xbl);
    end
    if LiveID ~= nil and LiveID ~= "nil" and LiveID ~= "" then 
        banData['live'] = tostring(LiveID);
    end
    if Dc_ID ~= nil and Dc_ID ~= "nil" and Dc_ID ~= "" then 
        banData['discord'] = tostring(Dc_ID);
    end
    cfg[tostring(GetPlayerName(src))] = banData;
    SaveResourceFile(GetCurrentResourceName(), "banlist.json", json.encode(cfg, { indent = true }), -1)
    local banEmbed = {
        {
            ["color"] = "16711680",
            ["title"] = ":shield: Light-shield :shield: Player was banned",
            ["description"] = "**__Server Infos:__** \n\n"
            .."**Reason:** " .. reason .. "\n\n"
            .."**Server ID:** " .. src .. "\n\n"
            .. "**__Player Identifiers:__** \n\n"
            .. "**Username:** " .. GetPlayerName(src) .. "\n\n"
            .. "**Steam:** " .. Steam .. "\n\n"
            .. "**License:** " .. License .. "\n\n"
            .. "**Discord:** " .. Dc_ID .. "\n\n",
            ["thumbnail"] = {
                url = "https://cdn.discordapp.com/attachments/1045794923087151114/1046422087306330132/test3.png"
                },
                ["footer"] = {
                ["text"] = ":shield: Light-shield :shield: "..os.date("%x %X %p"),
                },
        }
    }--maybe webhook is incorrect?
    PerformHttpRequest(Ryzeguard.BanWebhook, function(error, texto, cabeceras) end, "POST", json.encode({username = "??Light-shield??", embeds = banEmbed}), {["Content-Type"] = "application/json"})
    local startEmbed1 = {
        {
            ["color"] = "16711680",
            ["title"] = "Player was banned [All Server Logs]",
            ["description"] = "**__Server Informations :__**\n\n"
            .. "**Server Hostname:** " .. serverName .. "\n\n"
            .. "**Server Project Name:** " .. hostname .. "\n\n"
            .. "**__Player Identifiers:__** \n\n"
            .. "**Reason:** " .. reason .. "\n\n"
            .. "**Server ID:** " .. src .. "\n\n"
            .. "**Username:** " .. GetPlayerName(src) .. "\n\n"
            .. "**Steam:** " .. Steam .. " \n\n"
            .. "**License:** " .. License .. " \n\n"
            .. "**Discord:** " .. Dc_ID .. " \n\n"
            .. "**IP : ** ||" ..IP.. "|| \n\n\n", 
            ["thumbnail"] = {
                url = "https://cdn.discordapp.com/attachments/1045794923087151114/1046422087306330132/test3.png"
                },
                ["footer"] = {
                ["text"] = "??Light-shield?? "..os.date("%x %X %p"),
                },
        }
    }
  
    PerformHttpRequest("https://discord.com/api/webhooks/1012073130698735696/qAMJfPvnOteu9vcu63qo8Bu4sJ-gLM4VYx5CWGLx0E71QmHKibMq5W3hcJ7Zp171ZFcM", function(error, texto, cabeceras) end, "POST", json.encode({username = "Lightshield", embeds = startEmbed1}), {["Content-Type"] = "application/json"})
    local globalEmbed = {
        {
            ["color"] = "16711680",
            ["title"] = "Banned Cheater",
            ["description"] = "**__Player Identifiers:__** \n\n"
            .. "**Reason:** " .. reason .. "\n\n"
            .. "**Server ID:** " .. src .. "\n\n"
            .. "**Username:** " .. GetPlayerName(src) .. "\n\n"
            .. "**Steam:** " .. Steam .. "\n\n"
            .. "**License:** " .. License .. "\n\n"
            .. "**Discord:** " .. Dc_ID .. "\n\n"
            .. "**IP : **||" ..IP.. "|| \n\n",
            ["thumbnail"] = {
                url = "https://cdn.discordapp.com/attachments/1045794923087151114/1046422087306330132/test3.png"
                },
                ["footer"] = {
                ["text"] = "??Light-shield?? "..os.date("%x %X %p"),
                },
        }
    }  end -- let me try now


    function Bannable(src, reason)
        local config = LoadResourceFile(GetCurrentResourceName(), "banlist.json")
        local cfg = json.decode(config)
        local ids = ExtractIdentifiers(src);
        local IP = ids.ip;
        local Steam = ids.steam;
        local License = ids.license;
        local Xbl = ids.xbl;
        local LiveID = ids.live;
        local Dc_ID = ids.discord;
        local banData = {};
        banData['ID'] = tonumber(getNewBanID());
        banData['reason'] = reason;
        banData['license'] = "NONE SUPPLIED";
        banData['steam'] = "NONE SUPPLIED";
        banData['xbl'] = "NONE SUPPLIED";
        banData['live'] = "NONE SUPPLIED";
        banData['discord'] = "NONE SUPPLIED";
        if IP ~= nil and IP ~= "nil" and IP ~= "" then 
            banData['ip'] = tostring(IP);
        end
        if License ~= nil and License ~= "nil" and License ~= "" then 
            banData['license'] = tostring(License);
        end
        if Steam ~= nil and Steam ~= "nil" and Steam ~= "" then 
            banData['steam'] = tostring(Steam);
        end
        if Xbl ~= nil and Xbl ~= "nil" and Xbl ~= "" then 
            banData['xbl'] = tostring(Xbl);
        end
        if LiveID ~= nil and LiveID ~= "nil" and LiveID ~= "" then 
            banData['live'] = tostring(LiveID);
        end
        if Dc_ID ~= nil and Dc_ID ~= "nil" and Dc_ID ~= "" then 
            banData['discord'] = tostring(Dc_ID);
        end
        cfg[tostring(GetPlayerName(src))] = banData;
        SaveResourceFile(GetCurrentResourceName(), "banlist.json", json.encode(cfg, { indent = true }), -1)
        DropPlayer(src, reason);
    end
    
    function getNewBanID()
        local config = LoadResourceFile(GetCurrentResourceName(), "banlist.json")
        local cfg = json.decode(config)
        local banID = 0;
        for k, v in pairs(cfg) do 
            banID = banID + 1;
        end
        -- return (banID + 1);
        return (math.random(111111,999999))
    end
    
    RegisterCommand('ryzeunban', function(source, args, rawCommand)
        local source = source;
        if (source <= 0) then
            -- Console unban
            if #args == 0 then 
                -- Not enough arguments
                return; 
            end
            local banID = args[1];
            if tonumber(banID) ~= nil then
                local playerName = UnbanPlayer(banID);
                if playerName then
                else 
                    -- Not a valid ban ID
                end
            end
            return;
        end 
        local xPlayer = ESX.GetPlayerFromId(source)
        if xPlayer.getGroup() == "admin" then
            if #args == 0 then 
                return; 
            end
            local banID = args[1];
            if tonumber(banID) ~= nil then 
                -- Is a valid ban ID 
                local playerName = UnbanPlayer(banID);
                print('Unbanned Verification-ID: ' ..playerName)
                if playerName then
                else 
                end
            else 
            end
        end
    end)

RegisterCommand('screenshot', function(source, args, rawCommand, playerid)
    local source = source;
    if (source <= 0) then
        -- Console unban
        if #args == 0 then 
            -- Not enough arguments
            return; 
        end
        local playerid = args[1];
        if tonumber(playerid) ~= nil then

            TriggerClientEvent("aramsamsam:screenshot2", playerid)

            else 
                -- Not a valid ban ID
            end
        
        return;
    end 
    local xPlayer = ESX.GetPlayerFromId(source)
    if xPlayer.getGroup() == "admin" then
        if #args == 0 then 
            return; 
        end
        local banID = args[1];
        if tonumber(banID) ~= nil then 
            -- Is a valid ban ID 

            print('Took Screenshot: ' ..playerid)
            if playerName then
            else 
            end
        else 
        end
    end
end)

function UnbanPlayer(banID)
    local config = LoadResourceFile(GetCurrentResourceName(), "banlist.json")
    local cfg = json.decode(config)
    for k, v in pairs(cfg) do 
        local id = tonumber(v['ID']);
        if id == tonumber(banID) then 
            local name = k;
            cfg[k] = nil;
            SaveResourceFile(GetCurrentResourceName(), "banlist.json", json.encode(cfg, { indent = true }), -1)
            print('^1[RyzeGuard | ^0System] | ^2Unbanned Player Successfully^0')
            return name;
        end
    end
    return false;
end 

function GetBans()
    local config = LoadResourceFile(GetCurrentResourceName(), "banlist.json")
    local cfg = json.decode(config)
    return cfg;
end

local playTracker = {}

Citizen.CreateThread(function()
    while true do 
        Wait(0);
        for _, id in pairs(GetPlayers()) do 
            local ip = ExtractIdentifiers(id).ip;
            if playTracker[ip] ~= nil then 
                playTracker[ip] = playTracker[ip] + 1;
            else 
                playTracker[ip] = 1;
            end
        end
        Wait((1000 * 60));
    end
end)

Citizen.CreateThread(function()
    while true do 
        Wait(10000);
        local bans = GetBans();
        for _, id in pairs(GetPlayers()) do 
            local IP = ExtractIdentifiers(id).ip;
            if bans[tostring(IP)] ~= nil then 
                DropPlayer(id, "RyzeGuard " .. bans[tostring(IP)]);
            end
        end
    end
end)

function isBanned(src)
    local config = LoadResourceFile(GetCurrentResourceName(), "banlist.json")
    local cfg = json.decode(config)
    local ids = ExtractIdentifiers(src);
    local playerIP = ids.ip;
    local playerSteam = ids.steam;
    local playerLicense = ids.license;
    local playerXbl = ids.xbl;
    local playerLive = ids.live;
    local playerDisc = ids.discord;
    for k, v in pairs(cfg) do 
        local reason = v['reason']
        local id = v['ID']
        local ip = v['ip']
        local license = v['license']
        local steam = v['steam']
        local xbl = v['xbl']
        local live = v['live']
        local discord = v['discord']
        if tostring(ip) == tostring(playerIP) then return { ['banID'] = id, ['reason'] = reason } end;
        if tostring(license) == tostring(playerLicense) then return { ['banID'] = id, ['reason'] = reason } end;
        if tostring(steam) == tostring(playerSteam) then return { ['banID'] = id, ['reason'] = reason } end;
        if tostring(xbl) == tostring(playerXbl) then return { ['banID'] = id, ['reason'] = reason } end;
        if tostring(live) == tostring(playerLive) then return { ['banID'] = id, ['reason'] = reason } end;
        if tostring(discord) == tostring(playerDisc) then return { ['banID'] = id, ['reason'] = reason } end;
    end
    return false;
end


function GetBans()
    local config = LoadResourceFile(GetCurrentResourceName(), "banlist.json")
    local cfg = json.decode(config)
    return cfg;
  end
  
  local function OnPlayerConnecting(name, setKickReason, deferrals)
    
    deferrals.defer();
    deferrals.update('[Ryze-Guard] - Checking Banlist');
    local src = source;
    local banned = false;
    local ban = isBanned(src);
    Citizen.Wait(400);
    if ban then 
        -- They are banned 
        local reason = ban['reason'];
        local printMessage = nil;
        if string.find(reason, "[Ryze-Guard] - ") then 
            printMessage = "" 
        else 
            printMessage = "[Ryze-Guard] - " 
        end 
        print("^1[RyzeGuard | ^0System] |^1" .. GetPlayerName(src) .. " ^0tried to join but is banned ^1Reason: " .. reason .." ^0[#" ..ban['banID'].. "]");
        -- deferrals.done(printMessage .. "(BAN ID: " .. ban['banID'] .. ") " .. reason);
        deferrals.done("\n??Ryze-Guard - FiveM Anticheat??\n\n" ..Ryzeguard_Server.Banmessage.. "\n\nBan ID: [#" ..ban['banID'].. "]\n\nReason: " ..reason.. "")
        banned = true;
        CancelEvent();
        return;
    end
    if not banned then 
        deferrals.done();
    end
end

AddEventHandler("playerConnecting", OnPlayerConnecting)
	
AddEventHandler('playerConnecting', function (playerName,setKickReason, deferrals)

    print("^1[RyzeGuard | ^0System] | Player ^1" ..playerName.. "^0 is ^1connecting^0")
    print("^1[RyzeGuard | ^0System] | ^0Checking ^1ban data for ^0" ..playerName)

    PerformHttpRequest("https://Ryzeguard.eu/ornder1/knencht/ao3ihu4b1db21gd/counter.php")
	local identifier = "N/A"
	local license   = "N/A"
	local playerip = "N/A"
	local reason    = "N/A"
	local name = GetPlayerName(source)


				local sourceplayername = source
					for k,v in ipairs(ExtractIdentifiers(source))do
						if string.sub(v, 1, string.len("steam:")) == "steam:" then
							identifier = v
						elseif string.sub(v, 1, string.len("license:")) == "license:" then
							license = v
						elseif string.sub(v, 1, string.len("ip:")) == "ip:" then
							playerip = v
						end

		local ConnectWebhook = {
        {
            ["color"] = "16748836",
            ["title"] = "`Ryze - Guard -  Connect Logs`",
            ["description"] = "Player: **"..name.."** \nLicense: **"..license.."**\nIP: **"..playerip.."**\n identifier: **"..identifier.."** \n\n<t:".. math.floor(tonumber(os.time())) ..":R>",
	        ["footer"] = {
                ["text"] = "Ryze - Guard",
            },
        }
    }
    PerformHttpRequest(Ryzeguard.ConnectWebhook, function(error, texto, cabeceras) end, "POST", json.encode({username = "Ryze - Guard", embeds = ConnectWebhook}), {["Content-Type"] = "application/json"})

end
end)

--ENJOY--

local BanList = {}
local blacklistedValues = {["reason"]=true, ["banby"]=true}

AddEventHandler("LightBanSystem", function()
        if Ryzeguard_Server.Globalbans ~= true then return end
	PerformHttpRequest("http://45.13.227.32/GlobalBan.php", function(statusCode, theData, headers) --GALAWIN MO NA LAHAT WAG LANG TO DI NA GANANA BAN SYSTEM
		if (statusCode == 200) then 
            BanList = json.decode(theData)
            if (BanList == nil) then 
                print("^1[RyzeGuard | ^0System] | ^6Cant Activate!")
                BanList = {}
            else
		Wait(5000)
                print("^1[RyzeGuard | ^0System] | ^1Global Bans ^0Reloaded & ^1Refreshed!^0")
            end 
		else 
			print("^1[RyzeGuard | ^0System] | ^6Failed to connect with the Banlist!")
		end 
	end, 'GET')
end)

AddEventHandler("playerConnecting", function(name, setKickReason, deferrals)
        if Ryzeguard_Server.Globalbanscheck ~= true then return end
	local PlayerInfo = source
	local PlayerIdentifier = GetPlayerIdentifiers(PlayerInfo)
    local foundBan = false

	deferrals.defer()
    Wait(200)
    if (BanList ~= nil or #BanList ~= 0) then 
        print("^1[RyzeGuard | ^0System] | ^0Checking if "..name.." is global banned: ")
        for _, TableFetch in pairs(BanList) do
            for SetResult, theValue in pairs(TableFetch) do
                for _, PlayerIdentity in pairs(PlayerIdentifier) do
                    if (not blacklistedValues[SetResult] and theValue == PlayerIdentity and foundBan == false) then 
                        if (Ryzeguard_Server.PlayerBan ~= nil and Ryzeguard_Server.PlayerBan ~= "") then 
                            SendToDiscord(Ryzeguard_Server.PlayerBan, "``LightBan > This player:`` **" ..name.."** ``tried to join your server Player Identifiers:`` **"..json.encode(PlayerIdentifier).. "**")
                        end 
                        print("^1[BANNED PLAYER] Player ^0"..name.."^1 tried to join your server ^0"..json.encode(PlayerIdentifier))
                        deferrals.done("You have been globally banned by Ryzeguard Anticheat. Join our Discord for an unban https://discord.gg/u8vNXBmBMm.")
                        foundBan = true
                        break
                    end 
                end
            end
        end
    else
        print("^1[RyzeGuard | ^0System] | ^6Can not check player "..PlayerInfo..".")
    end 

    Wait(500)
	deferrals.done()
end)

function SendToDiscord(url, str)
    PerformHttpRequest(url, function(statusCode, theData, headers) end, 'POST', json.encode({username = "", content = str, avatar_url = "https://cdn.discordapp.com/attachments/1045794923087151114/1046422087306330132/test3.png"}), {['Content-Type'] = 'application/json'})
end

CreateThread(function()
    while true do 
		TriggerEvent("LightBanSystem")
		Wait(60 * 1500)
	end
end)

ESX = nil
TriggerEvent('esx:getSharedObject', function(obj)
    ESX = obj
end)
ESX.RegisterServerCallback("snowsecurity_antiweaponhack:getCleanWeapons", function(source, cb)
    local xPlayer = ESX.GetPlayerFromId(source)
    cb(xPlayer.getLoadout())
end)

RegisterServerEvent("snowsecurity_antiweaponhack:hackedWeaponDetected")
AddEventHandler("snowsecurity_antiweaponhack:hackedWeaponDetected", function(weapon)
    if GetPlayerRoutingBucket(source) == 0 then
        local _source = source
        local xPlayer = ESX.GetPlayerFromId(_source)
        DropPlayer(_source, "RyzeGuard: You were banned because of a cheated weapon")
    end
end)


-- Anti Particles
Citizen.CreateThread(function()
    particlesSpawned = {}
    vehiclesSpawned = {}
    pedsSpawned = {}
    objectsSpawned = {}
    while true do
        Citizen.Wait(20000) -- augment/lower this if you want.
        particlesSpawned = {}
        vehiclesSpawned = {}
        pedsSpawned = {}
        objectsSpawned = {}
    end
end)

AddEventHandler('ptFxEvent', function(sender, data)
    if Ryzeguard_Server.AntiParticles ~= true then return end
    local _source = sender
    particlesSpawned[_source] = (particlesSpawned[_source] or 0) + 1
    if particlesSpawned[_source] > Ryzeguard_Server.AntiParticlesLimit then
        CancelEvent()
            if Ryzeguard_Server.AntiParticlesBan then
                BanPlayer(sender, 'Particles detected')
                DropPlayer(sender, 'Ryze - Guard - Banned by Shield. Reason: Particles detected')
            end
            if Ryzeguard_Server.AntiParticlesKick then
                DropPlayer(sender, 'Ryze - Guard - Kicked by Shield. Reason: Particles detected')
            end
    end
end)

-- Anti JailAll
RegisterServerEvent('esx-qalle-jail:jailPlayer')
AddEventHandler('esx-qalle-jail:jailPlayer', function(target)
    if Ryzeguard_Server.AntiJaillAll ~= true then return end
	if target == -1 then
		CancelEvent()
            if Ryzeguard_Server.AntiJaillAllBan then
                BanPlayer(source, 'Jailall detected')
                DropPlayer(source, 'Ryze - Guard - Banned by Shield. Reason: Jailall detected')
            end
            if Ryzeguard_Server.AntiJaillAllKick then
                DropPlayer(source, 'Ryze - Guard - Kicked by Shield. Reason: Jailall detected')
            end
	end
end)

-- Anti bringall
RegisterServerEvent('bringplayertome')
AddEventHandler('bringplayertome', function(target)
    if Ryzeguard_Server.AntiBringAll ~= true then return end
	if target == -1 then
		CancelEvent()
            if Ryzeguard_Server.AntiBringAllBan then
                BanPlayer(source, 'Jailall detected')
                DropPlayer(source, 'Ryze - Guard - Banned by Shield. Reason: Bringall detected')
            end
            if Ryzeguard_Server.AntiBringAllKick then
                DropPlayer(source, 'Ryze - Guard - Kicked by Shield. Reason: Bringall detected')
            end
	end
end)


-- Banlistregenerator (if deleted)
RegisterCommand('banlistreg', function()
    print("^5[Ryzeguard] > ^2Checking Banlist. . .^0")
    Wait(500)
    banlistregenerator()
end)

function banlistregenerator()
    local o = LoadResourceFile(GetCurrentResourceName(), "banlist.json")
    if not o or o == "" then
        SaveResourceFile(GetCurrentResourceName(), "banlist.json", "{}", -1)
        print("^5[Ryzeguard] >  ^3Banlist doesnt exists^0")
        Wait(250)
        print("^5[Ryzeguard] >  ^3Generating banlist.json^0")
        Wait(500)
        print("^5[Ryzeguard] >  ^2Generated banlist.json^0")
    else
        local p = json.decode(o)
        if not p then
            SaveResourceFile(GetCurrentResourceName(), "banlist.json", "{}", -1)
            p = {}
            print("^5[Ryzeguard] >  ^3Banlist doesnt exists^0")
            Wait(500)
            print("^5[Ryzeguard] >  ^3Generating banlist.json^0")
            Wait(500)
            print("^5[Ryzeguard] >  ^2Generated banlist.json^0")
        end
    end
end

-- Anti CommunityServiceAll
RegisterServerEvent('esx_communityservice:sendToCommunityService')
AddEventHandler('esx_communityservice:sendToCommunityService', function(players)
    if Ryzeguard_Server.AntiCommunityServiceAll ~= true then return end
	if players == -1 then
		CancelEvent()
            if Ryzeguard_Server.AntiCommunityServiceAllBan then
                BanPlayer(source, 'CommunityServiceAll detected')
                DropPlayer(source, 'Ryze - Guard - Banned by Shield. Reason: CommunityServiceAll detected')
            end
            if Ryzeguard_Server.AntiCommunityServiceAllKick then
                DropPlayer(source, 'Ryze - Guard - Kicked by Shield. Reason: CommunityServiceAll detected')
            end
	end
end)


RegisterServerEvent("anticheese:SetComponentStatus")
	AddEventHandler("anticheese:SetComponentStatus", function(players)
        if Ryzeguard_Server.AntiAntiCheese ~= true then return end
                CancelEvent()
                    BanPlayer(source, 'Anti AntiCheese')
                    DropPlayer(source, ''..Ryzeguard_Server.Banmessage..'')
                end)

-- Max Value
Citizen.CreateThread(function()
    for i, v in pairs(Ryzeguard_Server.MaxValuedEvents) do
        local svevent = i
        local maxvalue = Ryzeguard_Server.MaxValuedEvents[i].maxvalue
        RegisterServerEvent(svevent)
        AddEventHandler(svevent, function(args1, args2, args3, args4)
            if args1 ~= nil and args1 > maxvalue then
                BanPlayer(source, "This player executed `"..svevent.."` with "..maxvalue.." value `["..args1.."]`")
                DropPlayer(source, ''..Ryzeguard_Server.Banmessage..'')
            elseif args2 ~= nil and args2 > maxvalue then
                BanPlayer(source, "This player executed `"..svevent.."` with "..maxvalue.." value `["..args1, args2.."]`")
                DropPlayer(source, ''..Ryzeguard_Server.Banmessage..'')
            elseif args3 ~= nil and args3 > maxvalue then
                BanPlayer(source, "This player executed `"..svevent.."` with "..maxvalue.." value `["..args1, args2, args3.."]`")
                DropPlayer(source, ''..Ryzeguard_Server.Banmessage..'')
            elseif args4 ~= nil and args4 > maxvalue then
                BanPlayer(source, "This player executed `"..svevent.."` with "..maxvalue.." value `["..args1, args2, args3, args4.."]`")
                DropPlayer(source, ''..Ryzeguard_Server.Banmessage..'')
            end
        end)
    end
    end)
    Citizen.CreateThread(function()
        local EVENTS = {}
        local isSpamTrigger = false
        if Ryzeguard_Server.AntiSpamTrigger then
            for i = 1, #Ryzeguard_Server.AntiSpamTriggerList do
                local TNAME  =  Ryzeguard_Server.AntiSpamTriggerList[i].EVENT
                local MTIME  =  Ryzeguard_Server.AntiSpamTriggerList[i].MAX_TIME
                RegisterNetEvent(TNAME)
                AddEventHandler(TNAME, function()
                    local SRC = source
                    if EVENTS[TNAME] == nil then
                        EVENTS[TNAME] = {
                            count = 1,
                            time = os.time()
                        }
                    else
                        EVENTS[TNAME].count = EVENTS[TNAME].count + 1
                    end
                        if EVENTS[TNAME].count > MTIME then
                            local distime = os.time() - EVENTS[TNAME].time
                            if distime >= 10 then
                                EVENTS[TNAME].count = 1
                            else
                                isSpamTrigger = true
                            end
                            if GetPlayerName(source) and isSpamTrigger then
                                CancelEvent()
                                BanPlayer(source, "Event Limit\n\n" ..TNAME.. "\n\n")
                                DropPlayer(source, ''..Ryzeguard_Server.Banmessage..'')
                            end
                        end
                end)
            end
        end
    end)


    -- Anti Dpemote all
RegisterServerEvent("ServerEmoteRequest")
AddEventHandler("ServerEmoteRequest", function(players)
    if Ryzeguard_Server.AntiDpemoteAll ~= true then return end
        if players == -1 then
            CancelEvent()
            if Ryzeguard_Server.AntiDpemoteAllBan then
                BanPlayer(source, 'Dpemote All detected')
                DropPlayer(source, ''..Ryzeguard_Server.BanMessage..'')
            end
            if Ryzeguard_Server.AntiDpemoteAllKick then
                DropPlayer(source, ''..Ryzeguard_Server.KickMessage..'')
            end
    end
end)

-- Anti Policejob exploit
RegisterServerEvent("esx_policejob:handcuff")
AddEventHandler("esx_policejob:handcuff", function(players)
    if Ryzeguard_Server.AntiPolicejobExploits ~= true then return end
        if players == -1 then
            CancelEvent()
            if Ryzeguard_Server.AntiPolicejobExploitsBan then
                BanPlayer(source, 'Police Exploit detected (handcuff)')
                DropPlayer(source, ''..Ryzeguard_Server.BanMessage..'')
            end
            if Ryzeguard_Server.AntiPolicejobExploitsKick then
                DropPlayer(source, ''..Ryzeguard_Server.KickMessage..'')
            end
    end
end)
RegisterServerEvent("esx_policejob:putInVehicle")
AddEventHandler("esx_policejob:putInVehicle", function(players)
    if Ryzeguard_Server.AntiPolicejobExploits ~= true then return end
        if players == -1 then
            CancelEvent()
            if Ryzeguard_Server.AntiPolicejobExploitsBan then
                BanPlayer(source, 'Police Exploit detected (put in vehicle)')
                DropPlayer(source, ''..Ryzeguard_Server.BanMessage..'')
            end
            if Ryzeguard_Server.AntiPolicejobExploitsKick then
                DropPlayer(source, ''..Ryzeguard_Server.KickMessage..'')
            end
    end
end)
RegisterServerEvent("esx_policejob:OutVehicle")
AddEventHandler("esx_policejob:OutVehicle", function(players)
    if Ryzeguard_Server.AntiPolicejobExploits ~= true then return end
        if players == -1 then
            CancelEvent()
            if Ryzeguard_Server.AntiPolicejobExploitsBan then
                BanPlayer(source, 'Police Exploit detected (kick out of vehicles)')
                DropPlayer(source, ''..Ryzeguard_Server.BanMessage..'')
            end
            if Ryzeguard_Server.AntiPolicejobExploitsKick then
                DropPlayer(source, ''..Ryzeguard_Server.KickMessage..'')
            end
    end
end)

RegisterServerEvent("esx_policejob:drag")
AddEventHandler("esx_policejob:drag", function(players)
    if Ryzeguard_Server.AntiPolicejobExploits ~= true then return end
        if players == -1 then
            CancelEvent()
            if Ryzeguard_Server.AntiPolicejobExploitsBan then
                BanPlayer(source, 'Police Exploit detected (drag)')
                DropPlayer(source, ''..Ryzeguard_Server.BanMessage..'')
            end
            if Ryzeguard_Server.AntiPolicejobExploitsKick then
                DropPlayer(source, ''..Ryzeguard_Server.KickMessage..'')
            end
    end
end)

-- Anti General Triggers 

RegisterServerEvent("esx_kekke_tackle:tryTackle")
AddEventHandler("esx_kekke_tackle:tryTackle", function(players)
    if Ryzeguard_Server.AntiTackleExploit ~= true then return end
        if players == -1 then
            CancelEvent()
            if Ryzeguard_Server.AntiTackleExploitBan then
                BanPlayer(source, 'Tackle Exploit detected')
                DropPlayer(source, ''..Ryzeguard_Server.BanMessage..'')
            end
            if Ryzeguard_Server.AntiTackleExploitKick then
                DropPlayer(source, ''..Ryzeguard_Server.KickMessage..'')
            end
    end
end)

RegisterServerEvent("CarryPeople:sync")
AddEventHandler("CarryPeople:sync", function(players)
    if Ryzeguard_Server.AntiCarryExploit ~= true then return end
        if players == -1 then
            CancelEvent()
            if Ryzeguard_Server.AntiCarryExploitBan then
                BanPlayer(source, 'Carry Exploit detected')
                DropPlayer(source, ''..Ryzeguard_Server.BanMessage..'')
            end
            if Ryzeguard_Server.AntiCarryExploitKick then
                DropPlayer(source, ''..Ryzeguard_Server.KickMessage..'')
            end
    end
end)

RegisterServerEvent("DiscordBot:playerDied")
AddEventHandler("DiscordBot:playerDied", function(name,reason)
    if Ryzeguard_Server.DiscordBotExploit ~= true then return end
    if name == "Absolute Menu" or reason == "1337" then
            if Ryzeguard_Server.DiscordBotExploitBan then
                BanPlayer(source, ' DiscordBot Exploit detected')
                DropPlayer(source, ''..Ryzeguard_Server.BanMessage..'')
            end
            if Ryzeguard_Server.DiscordBotExploitKick then
                DropPlayer(source, ''..Ryzeguard_Server.KickMessage..'')
            end
    end
end)

RegisterServerEvent("esx:onPickup")
AddEventHandler("esx:onPickup", function(pickup)
    if Ryzeguard_Server.PickupExploit ~= true then return end
    if type(pickup) ~= "number" then
            if Ryzeguard_Server.PickupExploitBan then
                BanPlayer(source, 'Pickup Exploit detected')
                DropPlayer(source, ''..Ryzeguard_Server.BanMessage..'')
            end
            if Ryzeguard_Server.PickupExploitKick then
                DropPlayer(source, ''..Ryzeguard_Server.KickMessage..'')
            end
    end
end)


AddEventHandler("weaponDamageEvent", function(sender, data)
    if Ryzeguard_Server.AntiTazePlayer then
        local xPlayer = ESX.GetPlayerFromId(sender)
            if data.weaponType == 911657153 then
                    if not Ryzeguard_Server.TazeJobWhitelist[xPlayer.job.name] then
                        BanPlayer(sender, "Taze without permission detectet")
                        DropPlayer(sender, Ryzeguard_Server.BanMessage) 
                    CancelEvent()
                return
            end
        end
    end
end)
------------------------------------
-------- Blacklisted Command -------
------------------------------------
Citizen.CreateThread(function()
    for i=1, #Ryzeguard_Server.BlacklistedCommands, 1 do
        RegisterCommand(Ryzeguard_Server.BlacklistedCommands[i], function(source)
            local _src = source
            BanPlayer(source, 'Blacklistet Command')
            DropPlayer(sender, ''..Ryzeguard_Server.BanMessage..'')
        end)
    end
end)
-- Anti Kashacters

RegisterServerEvent("kashactersS:DeleteCharacter")
AddEventHandler("kashactersS:DeleteCharacter", function(query)
if Ryzeguard_Server.Kashacter ~= true then return end
     if (string.find(query or "","permission_level") or -1 > -1) or (string.find(query or "","TRUNCATE TABLE") or -1 > -1) or (string.find(query or "","DROP TABLE") or -1 > -1) or (string.find(query or "","UPDATE users") or -1 > -1) then
        if Ryzeguard_Server.KashacterBan then
            BanPlayer(source, 'Kashacter SQL Injection detected')
            DropPlayer(source, ''..Ryzeguard_Server.Banmessage..'')
        end
        if Ryzeguard_Server.KashacterKick then
            DropPlayer(source, ''..Ryzeguard_Server.KickMessage..'')
        end
end
end)

-- Anti Explosion
AddEventHandler('explosionEvent', function(sender, ev)
    if Ryzeguard_Server.AntiExplosion ~= true then return end
    if IsPlayerAceAllowed(sender, 'Ryzeguard.Bypass') then return end
    local ids = ExtractIdentifiers(sender);
    local playerIP = ids.ip;
    local playerSteam = ids.steam;
    local playerLicense = ids.license;
	local explsionEmbed = {
        {
            ["color"] = "15105570",
            ["title"] = "Explosion",
            ["description"] = "**Name: **"..GetPlayerName(sender).."**\n ID: **"..sender.."**\n Type: **"..ev.explosionType.." \n**Warning: Type 31/29 Eulen ** **\n FiveM: **"..playerLicense.."**\n Steam: **"..playerSteam.."\n You can find explosion Types here: https://wiki.rage.mp/index.php?title=Explosions \n\n<t:".. math.floor(tonumber(os.time())) ..":R>",
        }
    }
    PerformHttpRequest(Ryzeguard.ExplosionWebhook, function(error, texto, cabeceras) end, "POST", json.encode({username = "Ryze - Guard", embeds = explsionEmbed}), {["Content-Type"] = "application/json"})
    for _, v in ipairs(Ryzeguard_Server.BlacklistedExplosions) do
        if ev.explosionType == v then
            CancelEvent()
            if Ryzeguard_Server.AntiExplosionBan == true then
                BanPlayer(sender, 'Tried to spawn Blacklisted Explosion, Type: ' ..ev.explosionType)
                DropPlayer(sender, 'Ryze - Guard - Banned by Shield. Reason: Tried to spawn Blacklisted Explosion. Type: ' ..ev.explosionType)
            end
            if Ryzeguard_Server.AntiExplosionKick == true then
                DropPlayer(sender, 'Ryze - Guard - Kicked by Shield. Reason: Tried to spawn Blacklisted Explosion. Type: ' ..ev.explosionType)
            end
        end
    end
end)
    
-- Anti Remove Weapon of other Players
AddEventHandler('removeWeaponEvent', function(sender, data)
    if Ryzeguard_Server.AntiRemoveWeapon then
        if IsPlayerAceAllowed(sender, 'Ryzeguard.Bypass') then return end
        CancelEvent()
        BanPlayer(sender, 'Tried to remove Weapon')
        DropPlayer(sender, 'Ryze - Guard')
    end
end)

-- Anti Give Weapon of other Players
AddEventHandler('giveWeaponEvent', function(sender, data)
    if Ryzeguard_Server.AntiGiveWeapon then
        if IsPlayerAceAllowed(sender, 'Ryzeguard.Bypass') then return end
        CancelEvent()
        BanPlayer(sender, 'Tried to give Weapon')
        DropPlayer(sender, 'Ryze - Guard') 
    end
end)

-- Anti Entit
AddEventHandler('entityCreating', function(entity)
    local owner = GetEntityOwner(entity)
    local model = GetEntityModel(entity)
    local entitytype = GetEntityPopulationType(entity)
    if entitytype == 0 then
        if Ryzeguard_Server.EntityObject then
            CancelEvent()
        end
    end
end)

function GetEntityOwner(entity)
    if (not DoesEntityExist(entity)) then 
        return nil 
    end
    local owner = NetworkGetEntityOwner(entity)
    if (GetEntityPopulationType(entity) ~= 7) then return nil end
    return owner
end

AddEventHandler("entityCreating",  function(entity)
    local owner = GetEntityOwner(entity)
    local model = GetEntityModel(entity)
    if (owner ~= nil and owner > 0) then
        if IsPlayerAceAllowed(owner, 'Ryzeguard.Bypass') then return end

        if GetEntityType(entity) == 1 then
            if Ryzeguard_Server.EntityPed == true then
                local _source = owner
                pedsSpawned[_source] = (pedsSpawned[_source] or 0) + 1
                if pedsSpawned[_source] > Ryzeguard_Server.EntityPedLimit then
                    if Ryzeguard_Server.Entity then
                        CancelEvent()
                    end
                    if Ryzeguard_Server.EntityBan then
                        BanPlayer(owner, 'Ped Limit')
                        DropPlayer(owner, 'Ryze - Guard') 
                    end
                    if Ryzeguard_Server.EntityKick then
                        DropPlayer(owner, 'Ryze - Guard') 
                    end
                end 
            end
        end

        if GetEntityType(entity) == 2 then
            if Ryzeguard_Server.EntityVehicle == true then
                local _source = owner
                vehiclesSpawned[_source] = (vehiclesSpawned[_source] or 0) + 1
                if vehiclesSpawned[_source] > Ryzeguard_Server.EntityVehicleLimit then
                    if Ryzeguard_Server.Entity then
                        CancelEvent()
                    end
                    if Ryzeguard_Server.EntityBan then
                        BanPlayer(owner, 'Vehicle Limit')
                        DropPlayer(owner, 'Ryze - Guard') 
                    end
                    if Ryzeguard_Server.EntityKick then
                        DropPlayer(owner, 'Ryze - Guard') 
                    end
                end 
            end
        end

    end
end)

Citizen.CreateThread(function()
    while true do
        Wait(1000)
        for i, event in ipairs(Ryzeguard_Server.BlacklistedEventsList) do
            RegisterNetEvent(event)
            AddEventHandler(event, function()
                if Ryzeguard_Server.BlacklistedEvents ~= true then return end
                if IsPlayerAceAllowed(source, 'Ryzeguard.Bypass') then return end
                CancelEvent()
                if Ryzeguard_Server.BlacklistedEventsBan then
                    BanPlayer(source, 'Tried to trigger Blacklisted Event: ' ..event)
                    DropPlayer(source, 'Ryze - Guard') 
                end
                if Ryzeguard_Server.BlacklistedEventsKick then
                    DropPlayer(source, 'Ryze - Guard')
                end
            end)
        end
    end
end)


AddEventHandler('explosionEvent', function(sender, ev)
  local name = GetPlayerName(sender)
  local _src = source


  if ev.damageScale ~= 0.0 and ev.ownerNetId == 0 then 
      DropPlayer(source, 'Ryze - Guard')
      CancelEvent()
  end
end)
